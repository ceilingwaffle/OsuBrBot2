import { IOsuApiFetcher } from "./interfaces/osu-api-fetcher";
import { Log } from "../utils/log";
// import { OsuMultiplayerService } from "./osu-multiplayer-service";
import { Multiplayer } from "./types/multiplayer";
import { SetIntervalAsyncTimer, dynamic, clearIntervalAsync } from "set-interval-async";
import { NodesuApiFetcher } from "./nodesu-api-fetcher";

/**
 * pass the interface around classes.   e.g. BeatmapController.getMapTitle() calls IBeatmap.getMapTitle()

LobbyScanner can just use nodesu objects, but it should always return custom objects containing whatever we need - add props to these custom objects whenever the need arises
 */

interface Watching {
  timer: SetIntervalAsyncTimer;
  forGameIds: number[];
  banchoMultiplayerId: string;
}

/**
 * Singleton
 *
 * @export
 * @class OsuLobbyWatcher
 */
class OsuLobbyWatcher {
  private static instance: OsuLobbyWatcher;
  protected static config = {
    lobbyScanInterval: 1000
  };
  protected api: IOsuApiFetcher = NodesuApiFetcher.getInstance();
  // protected multiplayerService: OsuMultiplayerService = new OsuMultiplayerService();
  protected watchers: { [banchoMpId: string]: Watching } = {};
  protected latestMultiResults: Multiplayer;

  private constructor() {
    Log.info(`Initializing ${this.constructor.name}...`);
  }

  public static getInstance() {
    if (!OsuLobbyWatcher.instance) {
      OsuLobbyWatcher.instance = new OsuLobbyWatcher();
    }
    return OsuLobbyWatcher.instance;
  }

  /**
   * Starts a match-results watcher for a Bancho multiplayer.
   *
   * @param {{
   *     banchoMultiplayerId: string;
   *     gameId: number;
   *     startAtMapNumber?: number;
   *   }} {
   *     banchoMultiplayerId,
   *     gameId,
   *     startAtMapNumber = 1
   *   }
   * @returns {Promise<boolean>} true if the watcher was started successfully.
   */
  public watch({
    banchoMultiplayerId,
    gameId,
    startAtMapNumber = 1
  }: {
    banchoMultiplayerId: string;
    gameId: number;
    startAtMapNumber?: number;
  }): void {
    // await this.osuApi.isValidBanchoMultiplayerId(banchoMpId); // shouldnt be resposibile for validation?
    try {
      if (!this.isWatchingBanchoMultiplayer(banchoMultiplayerId)) {
        const timer = this.createWatcherTimer({ banchoMultiplayerId });
        this.addNewWatcher({ timer, gameId, banchoMultiplayerId });
      } else {
        this.addGameIdToExistingWatcher({ gameId, banchoMultiplayerId });
      }

      Log.methodSuccess(this.watch, this.constructor.name);
      return;
    } catch (error) {
      Log.methodError(this.watch, this.constructor.name, `Error when trying to start watcher for MP ${banchoMultiplayerId}.`, error);
      throw error;
    }
  }

  /**
   * Stops a watcher for a Bancho multiplayer.
   *
   * @param {{ banchoMultiplayerId: string; gameId?: number }} { banchoMultiplayerId, gameId }
   */
  public async unwatch({ banchoMultiplayerId, gameId }: { banchoMultiplayerId: string; gameId?: number }): Promise<void> {
    try {
      if (!this.isWatchingBanchoMultiplayer(banchoMultiplayerId)) {
        return Log.methodFailure(this.unwatch, this.constructor.name, `Not currently watching MP ${banchoMultiplayerId}. Nothing to do.`);
      }

      if (!this.isWatchingForGame(gameId)) {
        return Log.methodFailure(this.unwatch, this.constructor.name, `Not currently watching game ID ${gameId}. Nothing to do.`);
      }

      if (!gameId) {
        // since no game ID was specified, we are saying we want the watcher removed for the Bancho multiplayer for one or many games
        await this.disposeWatcher(banchoMultiplayerId);
        return Log.methodSuccess(this.unwatch, this.constructor.name, `Unwatched MP ${banchoMultiplayerId}.`);
      } else {
        // watcher no longer needed for a specific game ID; keep the watcher in case other games still need it
        this.removeGameIdFromWatcher({ banchoMultiplayerId, gameId });
        return Log.methodSuccess(
          this.unwatch,
          this.constructor.name,
          `Removed game ID ${gameId} from watcher of MP ${banchoMultiplayerId}.`
        );
      }
    } catch (error) {
      Log.methodError(this.unwatch, this.constructor.name, `Error when trying to unwatch MP ${banchoMultiplayerId}.`, error);
      throw error;
    }
  }

  private addGameIdToExistingWatcher({ banchoMultiplayerId, gameId }: { banchoMultiplayerId: string; gameId: number }): void {
    const watcher = this.findWatcher(banchoMultiplayerId);
    if (!watcher) {
      throw new Error(`Cannot add game id to watcher because a watcher does not exist for MP ${banchoMultiplayerId}.`);
    }
    watcher.forGameIds.push(gameId);
    Log.debug(`Added game id ${gameId} to existing watcher for MP ${banchoMultiplayerId}.`);
  }

  private removeGameIdFromWatcher({ banchoMultiplayerId, gameId }: { banchoMultiplayerId: string; gameId: number }): void {
    const watcher = this.findWatcher(banchoMultiplayerId);
    if (!watcher) {
      throw new Error(`Cannot remove game id from watcher because a watcher does not exist for MP ${banchoMultiplayerId}.`);
    }
    watcher.forGameIds = watcher.forGameIds.filter(watcherGameId => watcherGameId !== gameId);
    Log.debug(`Removed game id ${gameId} from watcher for MP ${banchoMultiplayerId}.`);

    if (watcher.forGameIds.length < 1) {
      Log.debug(`MP ${banchoMultiplayerId} no longer being watched for any games, so stop watching it for results.`);
      this.disposeWatcher(banchoMultiplayerId);
    }
  }

  private createWatcherTimer({ banchoMultiplayerId }: { banchoMultiplayerId: string }): SetIntervalAsyncTimer {
    Log.debug(`Creating watcher timer for MP ${banchoMultiplayerId}...`);
    return dynamic.setIntervalAsync(
      async () => await this.refreshAndEmitMultiplayerResults(banchoMultiplayerId),
      OsuLobbyWatcher.config.lobbyScanInterval
    );
  }

  private async refreshAndEmitMultiplayerResults(banchoMultiplayerId: string): Promise<void> {
    try {
      // TODO: Use lobby.startingMapNumber to skip some results
      const multiResults = await this.api.fetchMultiplayerResults(banchoMultiplayerId);
      if (!this.isNewerMultiplayerResults(multiResults)) {
        return Log.info(`No new results yet for MP ${banchoMultiplayerId}.`);
      }

      Log.debug(`Fetched new multiplayer results for MP ${banchoMultiplayerId}.`);
      Log.warn("TODO: EMIT MULTIPLAYER MATCHES", multiResults.matches.slice(-1)[0].event.toString());
      this.setLatestResults(multiResults);
      // this.emit(multiResults);

      // const report = this.multiplayerService.processMultiplayerResults(multiResults).buildReport();
    } catch (error) {
      Log.error(`Error during mp results scan for MP ${banchoMultiplayerId}.`, error);
      throw error;
    }
  }

  private isNewerMultiplayerResults(comparison: Multiplayer) {
    if (!this.latestMultiResults || !this.latestMultiResults.matches || this.latestMultiResults.matches.length === 0) {
      Log.debug(`${this.isNewerMultiplayerResults.name}: true (newer because latest not yet set.)`);
      return true;
    }

    if (comparison.multiplayerId !== this.latestMultiResults.multiplayerId) {
      const error = `The multiplayer ID should never change for an instance of ${this.constructor.name}. Create a new instance to scan a new multiplayer.`;
      Log.methodError(this.isNewerMultiplayerResults, this.constructor.name);
      throw new Error(error);
    }

    if (comparison.matches.length > this.latestMultiResults.matches.length) {
      Log.debug(`${this.isNewerMultiplayerResults.name}: true (newer because more matches.)`);
      return true;
    }
    if (comparison.matches.slice(-1)[0].mapNumber !== this.latestMultiResults.matches.slice(-1)[0].mapNumber) {
      Log.debug(`${this.isNewerMultiplayerResults.name}: true (newer because map number (sequential) of last match differs.)`);
      return true;
    }

    const compareStartTime = comparison.matches.slice(-1)[0].startTime.getTime();
    const latestStartTime = this.latestMultiResults.matches.slice(-1)[0].startTime.getTime();
    const compareEndTime = comparison.matches.slice(-1)[0].endTime.getTime();
    const latestEndTime = this.latestMultiResults.matches.slice(-1)[0].endTime.getTime();

    if (compareStartTime !== latestStartTime) {
      Log.debug(`${this.isNewerMultiplayerResults.name}: true (newer because start time of last match differs.)`);
      return true;
    }

    if (!isNaN(compareEndTime) && compareEndTime !== latestEndTime) {
      Log.debug(
        `${this.isNewerMultiplayerResults.name}: true (newer because end time of last match differs.)`,
        compareEndTime,
        latestEndTime
      );
      return true;
    }

    Log.debug(`${this.isNewerMultiplayerResults.name}: false`);
    return false;
  }

  private addNewWatcher({
    timer,
    gameId,
    banchoMultiplayerId
  }: {
    timer: SetIntervalAsyncTimer;
    gameId?: number;
    banchoMultiplayerId: string;
  }): void {
    if (this.findWatcher(banchoMultiplayerId)) {
      throw new Error(
        `Watcher already exists for MP ${banchoMultiplayerId}. Did you mean to use ${this.addGameIdToExistingWatcher.name}(<gameId>)?`
      );
    }
    this.watchers[banchoMultiplayerId] = { timer: timer, forGameIds: [gameId], banchoMultiplayerId: banchoMultiplayerId };
    return Log.debug(`Added new watcher for MP ${banchoMultiplayerId}.`);
  }

  private async disposeWatcher(banchoMultiplayerId: string): Promise<void> {
    Log.debug(`Disposing watcher for MP ${banchoMultiplayerId}...`);
    await clearIntervalAsync(this.watchers[banchoMultiplayerId].timer);
    this.watchers[banchoMultiplayerId] = undefined;
    Log.debug(`Disposed watcher for MP ${banchoMultiplayerId}.`);
  }

  private setLatestResults(multiResults: Multiplayer): void {
    this.latestMultiResults = multiResults;
  }

  private findWatcher(banchoMultiplayerId: string): Watching {
    return this.watchers[banchoMultiplayerId];
  }

  private isWatchingBanchoMultiplayer(banchoMultiplayerId: string): boolean {
    return !!this.findWatcher(banchoMultiplayerId);
  }

  private isWatchingForGame(gameId: number): boolean {
    return Object.values(this.watchers).filter(watching => watching.forGameIds.includes(gameId)).length > 0;
  }
}
