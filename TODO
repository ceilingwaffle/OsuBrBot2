// using TODO+ extension for vscode
TODO: 
    ✔ Fix `Error: Multiplayer 54078930 is not currently being watched` when using `!endgame` command @created(19-08-30 07:43) @done(19-08-30 23:29)
    ✔ Fix `!obr removelobby` command not unwatching the lobby in the osu lobby scanner @created(19-08-30 23:29) @done(19-08-30 23:52)
    ☐ Remove all the comments starting with "GL:" from when we implemented the GameLobby entity @created(19-08-30 07:48)
    ✔ Completely rework adding/removing lobbies from games @created(19-08-28 20:27) @started(19-08-28 20:20) @done(19-08-30 07:41) @lasted(1d11h21m46s)
    Storing add/remove values on a many-to-many GamesLobby table: https://github.com/typeorm/typeorm/issues/1224
    ☐ Remove GameStatus.UNKNOWN
    Using "UNKNOWN" feels lazy. If there's an error preventing a known-status being applied, we should just throw an error instead of resorting to an "UNKNOWN" status. Also having a game status as "UNKNOWN" means that status has to be handled in some way eventually, so why not just handle it that way to start with?
    ☐ Explore the osu! API - we need to know if submitting a map when you're in a multi will display the map in your "recent" played maps. This is mainly for MING MODE where we need to know - if it's displayed in your recent plays with an F (if failed in a multi). Does it only show F if you didn't recover in the multi, or will it show some letter (S,A,B,C,D) when you recover before the end of the map.
    ☐ Take a look at the new osu! API
    ✔ Use test Discord Commando database depending on env context @started(19-08-26 21:40) @done(19-08-27 08:11) @lasted(10h31m25s)
    Functionality:
        Game in Progress:
            Things to Handle:
                ☐ All players of a team do not submit a score @created(19-09-02 13:36)
                    ☐ Option 1: Team loses a life @created(19-09-02 13:37)
                    ✘ Option 2: Team does not lose a life and we treat it as if they "skipped" this map @created(19-09-02 13:37) @cancelled(19-09-02 13:37)
                        Bad because it could be abused as a way to not lose lives.
                    ☐ Option 3: Team loses a life and receives warning that if they fail to submit a score on the next map, they will be immediately eliminated. @created(19-09-02 13:38)
                    ☐ Option 4: @created(19-09-02 13:39)
    Osu Lobby Watcher:
        ☐ Persist osu watcher lobbies being watched after app exits @created(19-08-30 22:45)
        ☐ Rebuild osu-lobby-watcher.ts using listener and EventEmitter @created(19-08-27 12:09)
            https://github.com/onury/tasktimer
            https://blog.x5ff.xyz/blog/typescript-interval-iot/ 
            https://github.com/sindresorhus/emittery
            https://www.npmjs.com/package/async-eventemitter
    Error Messages:
        ☐ When adding a lobby before creating a game, the error message returned should replace "user ID X" with [at]DiscordUsername" instead (e.g. No games have been created by user ID 2. -> No games have been created by [at]CeilingWaffle
        ☐ Response<T> should be of type AddLobbyFailureReport and contain a discordUserId property
            ☐ When adding an invalid bancho mp id (e.g. 1234) the error message should be better. Right now it's: banchoMultiplayerId: "1234" is bad because: [object Object]
    Server:
        ☐ Ensure app does not crash, or if it does, restart it in a reliable way
            Don't worry about uncaught exceptions like "connection closed" errors - just use foreverjs to restart the app in the event of failure.
        ☐ Handle internet disconnections by auto-reconnecting - e.g. https://i.imgur.com/v4GDoRf.png @created(19-09-02 10:01)
    Tests:
        ☐ Speed up test execution times @created(19-08-30 23:52)
            ☐ Can we run each group of tests in parallel by using a separate sqlite database for each group? @created(19-08-30 23:52)
        ✔ Finish writing commented-out tests in lobby-create.test.ts @started(19-08-18 20:12) @done(19-08-18 21:25) @lasted(1h13m39s)
        ✔ Run tests individually @done(19-08-18 22:41)
        ✔ Write tests for asserting lobby status after lobby-removal @started(19-08-20 05:22) @done(19-08-20 05:44) @lasted(22m21s)
        ☐ Finish writing tests for asserting error messages received when sending remove-lobby requests
        ☐ Write test for: Create a new user and add that user to a ref of a game, then assert that the user is a ref of that game
        ☐ Write test for LobbyService: Add 2 lobbies to a game, then remove 2 lobbies, then assert that game.lobbies.length = 0 @created(19-08-28 13:51)
        ☐ Create test suite for updating a game @created(19-08-31 13:58)
            ☐ Test user permission allowed/denied update @created(19-08-31 13:58)
        ✔ Write more tests for testing ending games @done(19-08-27 02:54)
        ☐ We have an issue where some tests are responsible for too much
            e.g. The end-game test is creating a game, changing the status, and ending the game. So now the test for "end game" will fail if the code fails in the GameControler under "create game".
            Solution 1 - Instead of calling controller methods, just directly modify the state of the database. The only disadvantage I can see to this is that there will be less test-coverage-redundancy, but this should be fine if we've tested every possible scenario in its own test. This way when a specific function fails, it will only fail the corresponding test.
        ☐ Replace assert.equal with assert.strictEqual
            I feel like using strictEqual would be less susceptible to some rare instances of tests passing when they shouldn't. I have no idea if this is actually true though. Needs research. 
    Database:
        ☐ Write typeorm migrations - but only once we go to production @created(19-08-27 08:08)
    Optimize: 
        ☐ Consider adding "use strict" to the top of all source files @created(19-08-30 23:18)
        ☐ Improve startup time for `npm run test`
        ☐ Fix having to restart the app multiple times waiting for database connection
            ☐ Handle soft/hard lobby deletes depending on whether or not matches exist for the given lobby.
            e.g. if the user adds the lobby, then immediately removes it, this is okay to hard delete.
        ☐ Too many match results being downloaded from the osu API.
            Need some way of limiting the maximum number of matches downloaded per multiplayer (right now we're using 500kb/s for 150+ matches in a single multi when polling every 1s)
    Refactor:
        ☐ Swap inversify back to typical @injectable() decorators on classes instead of using autoProvide with inversify.entities.ts file @created(19-09-02 09:58)
            This is just so we have one less dependency, and we can do things like mapping interfaces to class implementations. And create singleton instances of classes.
        ☐ Replace strings with Symbols in locale files e.g. en.json @created(19-08-28 19:41)
        ☐ Replace the default commando "catch-all" error-handler.
            Replace it with our own specific one with messages formatted the same as the ErrorDiscordMessageBuilder. Consider making ErrorDiscordMessageBuilder handle something less specific than just Response objects, or create another ErrorBuilder abstraction layer.
        ☐ Cleanup the failure methods. 
            Can we abstract and extend these? Keep them more consistent; less method signature copy pasting.
        ☐ Replace lolex with a spy in lobby-create.test.
            Using lolex is just a temp solution for now. The problem is if we use another timer anywhere else within the LobbyController.create method chain, it will replace all those timers with the lolex mock.
    Pre-release checklist:
        ☐ Some way of keeping dependencies secure and up-to-date
            Something like: https://dependabot.com/javascript/
    Design:
        What we have access to - maps, mods(SD), modes - team vs, ffa, TAG4, osu API
        ☐ We need a name for this thing
            Last Man Standing = LMS, so maybe lmsu -> lemonsu (good lord this is terrible; need more coffee) 
        Progression/Level-up Server System:
            Encourage people to use the bot more.
            ☐ Prestige Badges
            ☐ The more games you start, the more you level up.
            ☐ As you level up, you unlock more modes, e.g. like winner deciding who gets host.
            ☐ [1:18] Dionysaw: You unlock maps that you can play in lobbies
        Mini-Games:
            ☐ Voting for the winner
            ☐ Guess the roll
            ☐ osu! trivia quiz
        Game Modes:
            ☐ Team handicaps 
            ☐ Option to ignore score bonuses/reductions in score calculations (e.g. EZ 50% -> 100%, HD 106% -> 100%)
            ☐ Team Vs / Sudden Death idea
            Multiple lobby support for 16x16 teams. Could in theory have any nxn sizes, but maybe we want to limit it to 16x16 to make the chat experience better.
            ☐ Battle Royale / Last-Man-Standing, either solo or teams
                ☐ MING MODE - Whoever can pass with the lowest acc wins. Can't fail at any point.
                ☐ "True Elimination" Mode - Add option for kicking the losing team/player from the lobby within some short time after losing all their lives.
                    e.g. "CeilingWaffle doesn't feel so good..." *kicked*
                    ☐ Randomly request a roll of 50 or above to save themselves (to gain a life)
                ☐ The winner gets host
                ☐ The winner gets to the decide who gets kicked,
                    ☐ or maybe gets to choose one of the bottom 2 players to be kicked
                    ☐ or make it - everyone votes to decide who gets kicked
                    ☐ or the winner decides the target player, and the lobby votes yay or nay on whether or not they actually get kicked.
                ☐ If you SS, you gain a life, or temporarily gain some kind of forbidden power. Like you choose the next map. 
                ☐ If you're on 0 lives, you need to win the next map, otherwise you're eliminated. "One final chance" mode.
                ☐ Riwaka: One player can force a mod on the entire lobby
                    Would also be cool if one player could force a mod on a specific player
    Adding Lobbies:
        ✔ Currently, the lobby service is trying to add a new Lobby with the same banchoMultiplayerId rather than create a new Lobby-Game relationship. To fix this, add some code in the lobby service to check for the existing banchoMultiplayerId Lobby, and push the target-Game onto the lobby.games array. @started(19-08-18 17:00) @done(19-08-18 17:31) @lasted(31m15s)
        ✔ Make bancho multiplayer ID unique to lobby. No two lobbies should exist with the same mp ID. @done(19-08-18 19:49)
    User Permissions:
        https://github.com/tensult/role-acl
        ✔ Ensure that the user *removing a lobby* is a game ref or game creator @done(19-08-27 00:46)
        ✔ Ensure that the user *adding a lobby* is a game ref or game creator @done(19-08-27 00:46)
        ✔ Need some kind of game-permissions abstraction. e.g. user1.for(lobby).isPermittedTo(LobbyUpdateAction) - does a library already exist for this sort of thing? @done(19-08-27 00:46)
        ☐ Allow Discord roles to be used for app-roles. Use both Discord-roles and DB-user-roles.
    User-Game-Roles:
        ✘ After the game is created, add an entry in UserGameRoles using game id and requester-user id @cancelled(19-08-23 19:32)
        ✘ OLD IDEA -------- add the game without a relation to the UserGameRole, then create a new UserGameRole using gameCreator.userId + newGame.gameId + role === "game-creator" (this should update the game afterwards with a reference to the UserGameRole) @cancelled(19-08-23 19:32)
        ✘ Should we store a redundant reference to the game creator on the game entity? Possibly bad because now we have multiple references to the creator - what if we access it from the wrong entity while working on this in a few months time? @cancelled(19-08-23 19:32)
    Discord:
        Bot Permissions Required:
            ☐ Delete messages (e.g. user types yes to confirm destructive command - we need to delete that message) @created(19-08-30 23:06)
            ☐ Create text channels (to create game-specific channels) @created(19-08-30 23:07)
        Misc:
            ☐ Figure out how to handle the situation where the target-channel of the GameMessageTarget has been deleted. Where do messages get sent to? Maybe DM the original author?
            Use authorId as the message-target to do this.
            ☐ End game and shut-down watchers if the game target-channel is deleted. Listen for the "Channel Delete" event on the Discord.js Client: 
                Channel Delete event: https://discord.js.org/#/docs/main/stable/class/Client?scrollTo=e-channelDelete
                All Discord events: https://discord.js.org/#/docs/main/stable/typedef/WSEventType
                ☐ Also if the server is deleted. Is there an event for that? Send some kind of "server deleted, so we're shutting down the game" message to the original game author.
            ✔ Get user confirmation before performing destructive commands @created(19-08-26 21:53) @done(19-08-26 23:17)
                e.g. !obr endgame -> "Are you sure you want to end game 5? Enter yes to confirm."
            ☐ Delete the user's `yes` confirmation message @created(19-08-30 23:05)
            ☐ Send game-event messages to a specific game channel, and send @ replies to the user in the channel where they wrote the command. @created(19-08-28 08:22)
                e.g. User types !obr creategame.
                    Bot creates channel #obr-game-5
                    Bot replies in same channel "@user, The game has been created and channel #obr-game-5 was opened".
                    Bot emits message in #obr-game-5 with a game-created card containing the game properties.
                    Bot emits message with match results in #obr-game-5 when a lobby-match finishes.
                    Only admin, game-creator, and game ref are allowed to write messages in channel #obr-game-5.
        Commands:
            Discord:
                ☐ `!obr setchannel #<discordTextChannelName>` @created(19-09-01 23:50)
                    Sets the channel where match results and game-related messages will be delivered to.
            General:
                ☐ `!obr undo` @created(19-09-01 22:36)
                    Undoes the last command of the user. We won't need to confirm command actions with "yes" after this is implemented.
                    If this command is fired multiple times, it keeps undoing the command preceeding the previous undone one.
                ☐ `!obr redo` @created(19-09-01 22:36)
                    Redoes the last command of the user.
                ☐ `!obr targetgame <gameId>` @created(19-09-01 22:37)
                    Sets the gameId as the target of the user's commands. If not used, the user's most recent game is the target.
            Game:
                ✔ `!obr creategame` @done(19-09-01 22:56)
                    ✘ Refuse `!obr creategame` command from a game-channel. @cancelled(19-08-22 20:14)
                        This *should* be OK to allow, but could be weird in situations where one game has an initial-channel as the game-channel of another game. Could be problematic with channel deletions. So just disallow this for now to be safe.
                    ☐ Warn the user if they use `!obr creategame` if the last game they created is still active @created(19-08-31 08:05)
                        "Looks like the last game you created is still active (game id x). Are you sure you want to start a new game? Reply with "yes" if so. Otherwise do nothing and this message will expire in t seconds." 
                    ☐ Alias `!obr creategame` -> `!obr newgame` @created(19-08-31 08:05)
                ✔ `!obr endgame <gameId?>` DESTRUCTIVE @created(19-09-01 22:48) @done(19-09-01 22:56)
                ✔ `!obr editgame <prop> <propValue>` @created(19-08-31 23:41) @started(19-09-01 23:11) @done(19-09-02 12:36) @lasted(13h25m58s)
                ☐ `!obr startgame <gameId?>` @created(19-09-01 22:57)
                ☐ `!obr gameinfo <gameId?>` @created(19-08-31 23:41)
                    See types - https://discord.js.org/#/docs/commando/master/typedef/ArgumentInfo
                    Use a union type to check: If integer, assume gameId. If string, assume propKey.
                    Include description "use !obr targetgame to specify another game".
                ☐ `!obr listgames <active/closed/(default:all)?>` @created(19-09-01 22:38)
                    List the games created within this Discord server.
            Lobby:
                ✔ `!obr addlobby <banchoMpId>` @created(19-09-01 22:58) @done(19-09-01 23:05)
                    ✔ When using command !obr addlobby 54078930 6, on a game which already has that lobby added, return some error message. @started(19-08-19 00:30) @done(19-08-19 05:13) @lasted(4h43m45s)
                    ☐ Don't actually starting watching for results until `!obr startgame` is used, unless the lobby was added to an already-started game @created(19-09-02 13:57)
                    ☐ We should be able to add a lobby to an already-started game and just have the score calculator calculate scores for registered players in the new lobby during the score-calculation at the end of each match @created(19-09-02 13:58)
                ✔ `!obr removelobby <banchoMpId>` @created(19-09-01 23:05) @done(19-09-01 23:05)
                    ✔ Add a manual remove-lobby command. Include description like "this will not close the actual lobby; it will only tell the bot to stop scanning the lobby for future results." @started(19-08-19 00:30) @done(19-08-19 05:13) @lasted(4h43m45s)
            User Roles:
                ☐ `!obr addref @<discordUser>, @<discordUser>, ...` @created(19-08-31 23:41)
                ☐ `!obr removeref @<discordUser>, @<discordUser>, ...` @created(19-08-31 23:41)
                ☐ `!obr listrefs` @created(19-08-31 23:41)
            Teams:
                ☐ `!obr addteam <ouid1> <ouid2> ...` @created(19-08-31 23:41)
                    Adds a team of osu users. See targetgame command.
                    ☐ Allow multiline like `!obr addteams\n<ouid1> <ouid2>\n<ouid3> <ouid4>\n...` @created(19-08-31 14:04)
                ☐ `!obr removeteam <ouid1> <ouid2> ...` @created(19-08-31 23:41)
                ☐ `!obr clearteams` DESTRUCTIVE @created(19-08-31 23:41)
            Matches:
                ☐ `!obr undoresult <mapId?/mapName?>` @created(19-09-02 13:40)
                    Undoes the last match result for this game (i.e. when a map should be replayed).
                    Match scores are marked as skipped, and the preceeding lost team life gets restored.
                    If the game ended, it is restored to active.
                    If this command is fired multiple times, it keeps undoing the result preceeding the previous undone one.
                    ☐ mapName @created(19-09-02 13:49)
                        Clever search to target the result of a specific map.
                    ☐ Some minimum distance time @created(19-09-02 13:50)
                        So if a result comes in immediately before they use the command, it doesn't undo that immediate recent result - it should target the result prior to that one instead. 
                ☐ `!obr redoresult <mapId?/mapName?>` @created(19-09-02 13:43)
                    In case they want to undo the undo.
        Lobby Management: 

        Game Management: 
            ☐ Add command `!obr game <gameId> <prop> <newPropValue>` @created(19-08-31 13:59)
        Server Management:
            ✘ Add discord command `!obr set-channels-category "OBR Games"` @cancelled(19-08-22 20:14)
                This should create a new Discord-category (container of text-channels) where all future-created game-channels will be created in for this server.

    Matches:
        ☐  Use lobby.startingMapNumber to skip some map results
            osu-lobby-watcher.ts -> refreshAndEmitMultiplayerResults()
        ☐ Send discord message if it looks like the last match was aborted. 
            Implement some kind of MatchEvent Observer system? Discord message sender will then observe this event and send a message. Use "!obr include <matchId>" to include scores from the aborted match. 
Archive:
